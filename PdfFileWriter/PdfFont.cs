/////////////////////////////////////////////////////////////////////
//
//	PdfFileWriter
//	PDF File Write C# Class Library.
//
//	PdfFont
//	PDF Font resource.
//
//	Granotech Limited
//	Author: Uzi Granot
//	Version: 1.0
//	Date: April 1, 2013
//	Copyright (C) 2013-2016 Granotech Limited. All Rights Reserved
//
//	PdfFileWriter C# class library and TestPdfFileWriter test/demo
//  application are free software.
//	They is distributed under the Code Project Open License (CPOL).
//	The document PdfFileWriterReadmeAndLicense.pdf contained within
//	the distribution specify the license agreement and other
//	conditions and notes. You must read this document and agree
//	with the conditions specified in order to use this software.
//
//	For version history please refer to PdfDocument.cs
//
/////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Text;

namespace PdfFileWriter
{
/////////////////////////////////////////////////////////////////////
/// <summary>
/// PDF font descriptor flags enumeration
/// </summary>
/////////////////////////////////////////////////////////////////////
public enum PdfFontFlags
	{
	/// <summary>
	/// None
	/// </summary>
	None = 0,

	/// <summary>
	/// Fixed pitch font
	/// </summary>
	FixedPitch = 1,

	/// <summary>
	/// Serif font
	/// </summary>
	Serif = 1 << 1,

	/// <summary>
	/// Symbolic font
	/// </summary>
	Symbolic = 1 << 2,

	/// <summary>
	/// Script font
	/// </summary>
	Script = 1 << 3,

	/// <summary>
	/// Non-symbolic font
	/// </summary>
	Nonsymbolic = 1 << 5,

	/// <summary>
	/// Italic font
	/// </summary>
	Italic = 1 << 6,

	/// <summary>
	/// All cap font
	/// </summary>
	AllCap = 1 << 16,

	/// <summary>
	/// Small cap font
	/// </summary>
	SmallCap = 1 << 17,

	/// <summary>
	/// Force bold font
	/// </summary>
	ForceBold = 1 << 18
	}

/////////////////////////////////////////////////////////////////////
/// <summary>
/// Kerning adjustment class
/// </summary>
/// <remarks>
/// Text position adjustment for TJ operator.
/// The adjustment is for a font height of one point.
/// Mainly used for font kerning.
/// </remarks>
/////////////////////////////////////////////////////////////////////
public class KerningAdjust
	{
	/// <summary>
	/// Gets or sets Text
	/// </summary>
	public String	Text {get; set;}

	/// <summary>
	/// Gets or sets adjustment
	/// </summary>
	/// <remarks>
	/// Adjustment units are in PDF design unit. To convert to user units: Adjust * FontSize / (1000.0 * ScaleFactor)
	/// </remarks>
	public Double	Adjust {get; set;}

	/// <summary>
	/// Kerning adjustment constructor
	/// </summary>
	/// <param name="Text">Text</param>
	/// <param name="Adjust">Adjustment</param>
	public KerningAdjust
			(
			String	Text,
			Double	Adjust
			)
		{
		this.Text = Text;
		this.Adjust = Adjust;
		return;
		}
	}

////////////////////////////////////////////////////////////////////
/// <summary>
/// PDF font class
/// </summary>
/// <remarks>
/// <para>
/// For more information go to <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#LanguageSupport">2.3 Language Support</a>
/// </para>
/// <para>
/// <a href="http://www.codeproject.com/Articles/570682/PDF-File-Writer-Csharp-Class-Library-Version#FontResources">For example of defining font resources see 3.2. Font Resources</a>
/// </para>
/// </remarks>
////////////////////////////////////////////////////////////////////
public class PdfFont : PdfObject, IDisposable, IComparable<PdfFont>
	{
	internal	FontApi			FontApi;
	internal	Boolean			SymbolicFont;
	internal	CharInfo[][]	CharInfoArray;
	internal	Boolean[]		CharInfoBlockEmpty;
	internal	CharInfo		UndefinedCharInfo;
	internal	Int32			NewGlyphIndex;
	internal	PdfObject		GlyphIndexFont;
	internal	String			ResourceCodeGlyph;		// resource code automatically generated by the program
	internal	Boolean			FontResCodeUsed;		// 0-255
	internal	Boolean			FontResGlyphUsed;		// 255-0xffff
	internal	FontFamily		FontFamily;
	internal	string			FontFamilyName;
	internal	FontStyle		FontStyle;
	internal	Boolean			EmbeddedFont;
	internal	Font			DesignFont;
	internal	PdfFontFlags	FontFlags;
	internal	Int32			PdfLineSpacing;
	internal	Int32			PdfAscent;
	internal	Int32			PdfDescent;
	internal	Int32			PdfLeading {get{return(PdfLineSpacing - PdfAscent - PdfDescent);}}
	internal	Int32			DesignCapHeight;
	internal	Int32			DesignStrikeoutWidth;
	internal	Int32			DesignStrikeoutPosition;
	internal	Int32			DesignUnderlineWidth;
	internal	Int32			DesignUnderlinePosition;
	internal	Int32			DesignSubscriptSize;
	internal	Int32			DesignSubscriptPosition;
	internal	Int32			DesignSuperscriptSize;
	internal	Int32			DesignSuperscriptPosition;
	internal	Int32			DesignItalicAngle;
	internal	Int32			DesignFontWeight;
	internal	Int32			DesignHeight;

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// PDF Font resource constructor
	/// </summary>
	/// <param name="Document">Document object</param>
	/// <param name="FontFamilyName">Font family name</param>
	/// <param name="FontStyle">Font style</param>
	/// <param name="EmbeddedFont">Embedded font</param>
	/// <returns>PdfFont resource</returns>
	/// <remarks>The returned result is either a new PdfFont or an
	/// existing one with the same properties.</remarks>
	////////////////////////////////////////////////////////////////////

	public static PdfFont CreatePdfFont
			(
			PdfDocument		Document,			// PDF document main object
			String			FontFamilyName,		// font family name
			FontStyle		FontStyle,			// font style (Regular, Bold, Italic or Bold | Italic
			Boolean			EmbeddedFont = true	// embed font in PDF document file
			)
		{
		if(Document.FontArray == null) Document.FontArray = new List<PdfFont>();
		int Index = Document.FontArray.BinarySearch(new PdfFont(FontFamilyName, FontStyle, EmbeddedFont));
		if(Index >= 0) return Document.FontArray[Index];
		PdfFont NewFont = new PdfFont(Document, FontFamilyName, FontStyle, EmbeddedFont);
		Document.FontArray.Insert(~Index, NewFont);
		return NewFont;
		}

	// for search only
	private PdfFont
			(
			String			FontFamilyName,		// font family name
			FontStyle		FontStyle,			// font style (Regular, Bold, Italic or Bold | Italic
			Boolean			EmbeddedFont = true	// embed font in PDF document file
			)
		{
		// save parameters
		this.FontFamilyName = FontFamilyName;
		this.FontStyle = FontStyle;
		this.EmbeddedFont = EmbeddedFont;
		return;
		}

	private PdfFont
			(
			PdfDocument		Document,			// PDF document main object
			String			FontFamilyName,		// font family name
			FontStyle		FontStyle,			// font style (Regular, Bold, Italic or Bold | Italic
			Boolean			EmbeddedFont = true	// embed font in PDF document file
			) : base(Document, ObjectType.Dictionary, "/Font")
		{
		// save parameters
		this.FontFamilyName = FontFamilyName;
		this.FontStyle = FontStyle;
		this.EmbeddedFont = EmbeddedFont;
	
		// font style cannot be underline or strikeout
		if((FontStyle & (FontStyle.Underline | FontStyle.Strikeout)) != 0)
			throw new ApplicationException("Font resource cannot have underline or strikeout");

		// create two resource codes
		ResourceCode = Document.GenerateResourceNumber('F');
		ResourceCodeGlyph = Document.GenerateResourceNumber('F');

		// initialize new glyph index to 3
		NewGlyphIndex = 3;

		// get font family structure
		FontFamily = new FontFamily(FontFamilyName);

		// test font style availability
		if(!FontFamily.IsStyleAvailable(FontStyle)) throw new ApplicationException("Font style not available for font family");

		// design height
		DesignHeight = FontFamily.GetEmHeight(FontStyle);

		// Ascent, descent and line spacing for a one point font
		PdfAscent = FontFamily.GetCellAscent(FontStyle);
		PdfDescent = FontFamily.GetCellDescent(FontStyle); // positive number
		PdfLineSpacing = FontFamily.GetLineSpacing(FontStyle);

		// create design font
		DesignFont = new Font(FontFamily, DesignHeight, FontStyle, GraphicsUnit.Pixel);

		// create windows sdk font info object
		FontApi = new FontApi(DesignFont, DesignHeight);

		// create empty array of character information
		CharInfoArray = new CharInfo[256][];
		CharInfoBlockEmpty = new Boolean[256];

		// get undefined character info
		UndefinedCharInfo = FontApi.GetGlyphMetricsApiByGlyphIndex(0);
		UndefinedCharInfo.NewGlyphIndex = 0;

		// get outline text metrics structure
		WinOutlineTextMetric OTM = FontApi.GetOutlineTextMetricsApi();

		// make sure we have true type font and not device font
		if((OTM.otmTextMetric.tmPitchAndFamily & 0xe) != 6) throw new ApplicationException("Font must be True Type and vector"); 

		// PDF font flags
		FontFlags = 0;
		if((OTM.otmfsSelection & 1) != 0) FontFlags |= PdfFontFlags.Italic;
		// roman font is a serif font
		if((OTM.otmTextMetric.tmPitchAndFamily >> 4) == 1) FontFlags |= PdfFontFlags.Serif;
		if((OTM.otmTextMetric.tmPitchAndFamily >> 4) == 4) FontFlags |= PdfFontFlags.Script;
		// #define SYMBOL_CHARSET 2
		if(OTM.otmTextMetric.tmCharSet == 2)
			{
			FontFlags |= PdfFontFlags.Symbolic;
			SymbolicFont = true;
			}
		else
			{
			FontFlags |= PdfFontFlags.Nonsymbolic;
			SymbolicFont = false;
			}

		// #define TMPF_FIXED_PITCH 0x01 (Note very carefully that those meanings are the opposite of what the constant name implies.)
		if((OTM.otmTextMetric.tmPitchAndFamily & 1) == 0) FontFlags |= PdfFontFlags.FixedPitch;

		// strikeout
		DesignStrikeoutPosition = OTM.otmsStrikeoutPosition;
		DesignStrikeoutWidth = (Int32) OTM.otmsStrikeoutSize;

		// underline
		DesignUnderlinePosition = OTM.otmsUnderscorePosition;
		DesignUnderlineWidth = OTM.otmsUnderscoreSize;

		// subscript
		DesignSubscriptSize = OTM.otmptSubscriptSize.Y;
		DesignSubscriptPosition = OTM.otmptSubscriptOffset.Y;

		// superscript
		DesignSuperscriptSize = OTM.otmptSuperscriptSize.Y;
		DesignSuperscriptPosition = OTM.otmptSuperscriptOffset.Y;

		// italic angle is 10th of a degree
		DesignItalicAngle = OTM.otmItalicAngle;
		DesignFontWeight = OTM.otmTextMetric.tmWeight;

		DesignCapHeight = FontApi.GetGlyphMetricsApiByCode('M').DesignBBoxTop;

		// exit
		return;
		}

	////////////////////////////////////////////////////////////////////
	// Create glyph index font object on first usage
	////////////////////////////////////////////////////////////////////

	internal void CreateGlyphIndexFont()
		{
		GlyphIndexFont = new PdfObject(Document, ObjectType.Dictionary, "/Font");
		FontResGlyphUsed = true;
		return;
		}

	/// <summary>
	/// Get character information
	/// </summary>
	/// <param name="CharValue">Character value</param>
	/// <returns>Character information class</returns>
	public CharInfo GetCharInfo
			(
			Int32	CharValue
			)
		{
		// no support for control characters 
		if(CharValue < ' ' || CharValue > '~' && CharValue < 160 || CharValue > 0xffff) throw new ApplicationException("No support for control characters 0-31 or 127-159");

		// split input character
		Int32 RowIndex = CharValue >> 8;
		Int32 ColIndex = CharValue & 255;

		// define row if required
		if(CharInfoArray[RowIndex] == null)
			{
			// we know that this block is empty
			if(CharInfoBlockEmpty[RowIndex]) return(UndefinedCharInfo);

			// get block array
			CharInfo[] Block  = FontApi.GetGlyphMetricsApi(CharValue);
			if(Block == null)
				{
				CharInfoBlockEmpty[RowIndex] = true;
				return(UndefinedCharInfo);
				}

			// save block
			CharInfoArray[RowIndex] = Block;
			}

		// get charater info
		CharInfo Info = CharInfoArray[RowIndex][ColIndex];

		// undefined
		if(Info == null) return(UndefinedCharInfo);

		// character info
		return(Info);
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Font units to user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <param name="Value">Design value</param>
	/// <returns>Design value in user units</returns>
	////////////////////////////////////////////////////////////////////
	public Double FontDesignToUserUnits
			(
			Double		FontSize,
			Int32		Value
			)
		{
		return(((Double) Value * FontSize) / ((Double) DesignHeight * ScaleFactor));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Font design units to PDF design units
	/// </summary>
	/// <param name="Value">Font design value</param>
	/// <returns>PDF dictionary value</returns>
	////////////////////////////////////////////////////////////////////
	public Double FontDesignToPdfUnits
			(
			Int32	Value
			)
		{
		return(1000.0 * (Double) Value / (Double) DesignHeight);
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Line spacing in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Line spacing</returns>
	////////////////////////////////////////////////////////////////////
	public Double LineSpacing
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, PdfLineSpacing));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Font ascent in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Font ascent</returns>
	////////////////////////////////////////////////////////////////////
	public Double Ascent
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, PdfAscent));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Font ascent in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Font ascent plus half of internal leading.</returns>
	////////////////////////////////////////////////////////////////////
	public Double AscentPlusLeading
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, PdfAscent + (PdfLeading + 1) / 2));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Font descent in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Font descent</returns>
	////////////////////////////////////////////////////////////////////
	public Double Descent
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, PdfDescent));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Font descent in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Font descent plus half of internal leading.</returns>
	////////////////////////////////////////////////////////////////////
	public Double DescentPlusLeading
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, PdfDescent + PdfLeading / 2));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Capital M height in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Capital M height</returns>
	////////////////////////////////////////////////////////////////////
	public Double CapHeight
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, DesignCapHeight));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Strikeout position in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Strikeout position</returns>
	////////////////////////////////////////////////////////////////////
	public Double StrikeoutPosition
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, DesignStrikeoutPosition));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Strikeout width in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Strikeout line width.</returns>
	////////////////////////////////////////////////////////////////////
	public Double StrikeoutWidth
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, DesignStrikeoutWidth));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Underline position in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Underline position</returns>
	////////////////////////////////////////////////////////////////////
	public Double UnderlinePosition
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, DesignUnderlinePosition));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Underline width in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Underline line width.</returns>
	////////////////////////////////////////////////////////////////////
	public Double UnderlineWidth
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, DesignUnderlineWidth));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Subscript position in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Subscript position</returns>
	////////////////////////////////////////////////////////////////////
	public Double SubscriptPosition
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, DesignSubscriptPosition));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Subscript character size in points
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Subscript font size</returns>
	////////////////////////////////////////////////////////////////////
	public Double SubscriptSize
			(
			Double		FontSize
			)
		{
		// note: font size is in always points
		return(FontSize * (Double) DesignSubscriptSize / DesignHeight);
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Superscript character position
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Superscript position</returns>
	////////////////////////////////////////////////////////////////////
	public Double SuperscriptPosition
			(
			Double		FontSize
			)
		{
		return(FontDesignToUserUnits(FontSize, DesignSuperscriptPosition));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Superscript character size in points
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <returns>Superscript font size</returns>
	////////////////////////////////////////////////////////////////////
	public Double SuperscriptSize
			(
			Double		FontSize
			)
		{
		// note: font size is in always points
		return(FontSize * (Double) DesignSuperscriptSize / DesignHeight);
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Character width in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <param name="CharValue">Character code</param>
	/// <returns>Character width</returns>
	////////////////////////////////////////////////////////////////////
	public Double CharWidth
			(
			Double	FontSize,
			Char	CharValue
			)
		{
		return(FontDesignToUserUnits(FontSize, GetCharInfo(CharValue).DesignWidth));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Character width in user units
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <param name="DrawStyle">Draw style</param>
	/// <param name="CharValue">Character code</param>
	/// <returns>Character width</returns>
	////////////////////////////////////////////////////////////////////
	public Double CharWidth
			(
			Double		FontSize,
			DrawStyle	DrawStyle,
			Char		CharValue
			)
		{
		// character style is not superscript or subscript
		if((DrawStyle & (DrawStyle.Subscript | DrawStyle.Superscript)) == 0) return(FontDesignToUserUnits(FontSize, GetCharInfo(CharValue).DesignWidth));

		// superscript
		if((DrawStyle & DrawStyle.Superscript) != 0) return(FontDesignToUserUnits(SubscriptSize(FontSize), GetCharInfo(CharValue).DesignWidth));

		// subscript
		return(FontDesignToUserUnits(SuperscriptSize(FontSize), GetCharInfo(CharValue).DesignWidth));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Character bounding box in user coordinate units.
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <param name="CharValue">Character</param>
	/// <returns>Bounding box</returns>
	////////////////////////////////////////////////////////////////////
	public PdfRectangle CharBoundingBox
			(
			Double	FontSize,
			Char	CharValue
			)
		{
		// get character info
		CharInfo CharInfo = GetCharInfo(CharValue);

		// convert to user coordinate units
		Double Factor = FontSize / ((Double) DesignHeight * ScaleFactor);
		return(new PdfRectangle(Factor * CharInfo.DesignBBoxLeft, Factor * CharInfo.DesignBBoxBottom, Factor * CharInfo.DesignBBoxRight, Factor * CharInfo.DesignBBoxTop));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Text width
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <param name="Text">Text</param>
	/// <returns>Width</returns>
	////////////////////////////////////////////////////////////////////
	public Double TextWidth
			(
			Double	FontSize,
			String	Text
			)
		{
		// text width
		Int32 Width = 0;
		foreach(Char CharValue in Text) Width += GetCharInfo(CharValue).DesignWidth;

		// to user unit of measure
		return(FontDesignToUserUnits(FontSize, Width));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Word spacing to stretch text to given width
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <param name="ReqWidth">Required width</param>
	/// <param name="WordSpacing">Output word spacing</param>
	/// <param name="CharSpacing">Output character spacing</param>
	/// <param name="Text">Text</param>
	/// <returns>True-done, False-not done.</returns>
	////////////////////////////////////////////////////////////////////
	public Boolean TextFitToWidth
			(
			Double		FontSize,
			Double		ReqWidth,
			out Double	WordSpacing,
			out Double	CharSpacing,
			String		Text
			)
		{
		WordSpacing = 0;
		CharSpacing = 0;
		if(Text == null || Text.Length < 2) return(false);

		Int32 Width = 0;
		Int32 SpaceCount = 0;
		foreach(Char CharValue in Text)
			{
			// character width
			Width += GetCharInfo(CharValue).DesignWidth;

			// space count
			if(CharValue == ' ') SpaceCount++;
			}

		// to user unit of measure
		Double UserUnitsWidth = FontDesignToUserUnits(FontSize, Width);

		// extra spacing required
		Double ExtraSpace = ReqWidth - UserUnitsWidth;

		// string is too wide
		if(ExtraSpace < (-Document.Epsilon)) return(false);

		// string is just right
		if(ExtraSpace < Document.Epsilon) return(true);

		// String does not have any spacesS
		if(SpaceCount == 0)
			{
			CharSpacing = ExtraSpace / (Text.Length - 1);
			return(true);
			}

		// extra space per word
		WordSpacing = ExtraSpace / SpaceCount;

		// extra space is equal or less than one blank
		if(WordSpacing <= FontDesignToUserUnits(FontSize, GetCharInfo(' ').DesignWidth)) return(true);

		// extra space is larger that one blank
		// increase character and word spacing
		CharSpacing = ExtraSpace / (10 * SpaceCount + Text.Length - 1);
		WordSpacing = 10 * CharSpacing;
		return(true);
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Text bounding box in user coordinate units.
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <param name="Text">Text</param>
	/// <returns>Bounding box</returns>
	////////////////////////////////////////////////////////////////////
	public PdfRectangle TextBoundingBox
			(
			Double	FontSize,
			String	Text
			)
		{
		if(String.IsNullOrEmpty(Text)) return(null);

		// initialize result box to first character
		CharInfo FirstChar = GetCharInfo(Text[0]);
		Int32 Left = FirstChar.DesignBBoxLeft;
		Int32 Bottom = FirstChar.DesignBBoxBottom;
		Int32 Right = FirstChar.DesignBBoxRight;
		Int32 Top = FirstChar.DesignBBoxTop;
		Int32 Width = FirstChar.DesignWidth;

		// more than one character
		if(Text.Length > 1)
			{
			// loop from second character
			for(Int32 Index = 1; Index < Text.Length; Index++)
				{
				// get bounding box for current character
				CharInfo Info = GetCharInfo(Text[Index]);

				// update bottom
				if(Info.DesignBBoxBottom < Bottom) Bottom = Info.DesignBBoxBottom;

				// update top
				if(Info.DesignBBoxTop > Top) Top = Info.DesignBBoxTop;

				// accumulate width
				Width += Info.DesignWidth;
				}

			// last character
			CharInfo LastChar = GetCharInfo(Text[Text.Length - 1]);
			Right = Width - LastChar.DesignWidth + LastChar.DesignBBoxRight;
			}

		// convert to user coordinate units
		Double Factor = FontSize / ((Double) DesignHeight * ScaleFactor);
		return(new PdfRectangle(Factor * Left, Factor * Bottom, Factor * Right, Factor * Top));
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Text Kerning
	/// </summary>
	/// <param name="Text">Text</param>
	/// <returns>Kerning adjustment pairs</returns>
	////////////////////////////////////////////////////////////////////
	public KerningAdjust[] TextKerning
			(
			String	Text
			)
		{
		// string is empty or one character
		if(String.IsNullOrEmpty(Text) || Text.Length == 1) return(null);

		// find first and last characters of the text
		Int32 First = Text[0];
		Int32 Last = Text[0];
		foreach(Char Chr in Text)
			{
			if(Chr < First) First = Chr;
			else if(Chr > Last) Last = Chr;
			}

		// get kerning information
		WinKerningPair[] KP = FontApi.GetKerningPairsApi(First, Last);

		// no kerning info available for this font or for this range
		if(KP == null) return(null);

		// prepare a list of kerning adjustments
		List<KerningAdjust> KA = new List<KerningAdjust>();

		// look for pairs with adjustments
		Int32 Ptr1 = 0;
		for(Int32 Ptr2 = 1; Ptr2 < Text.Length; Ptr2++)
			{
			// search for a pair of characters
			Int32 Index = Array.BinarySearch(KP, new WinKerningPair(Text[Ptr2 - 1], Text[Ptr2]));

			// not kerning information for this pair
			if(Index < 0) continue;

			// add kerning adjustment in PDF font units (windows design units divided by windows font design height)
			KA.Add(new KerningAdjust(Text.Substring(Ptr1, Ptr2 - Ptr1), FontDesignToPdfUnits(KP[Index].KernAmount)));

			// adjust pointer
			Ptr1 = Ptr2;
			}

		// list is empty
		if(KA.Count == 0) return(null);

		// add last
		KA.Add(new KerningAdjust(Text.Substring(Ptr1, Text.Length - Ptr1), 0));

		// exit
		return(KA.ToArray());
		}

	////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Text kerning width
	/// </summary>
	/// <param name="FontSize">Font size</param>
	/// <param name="KerningArray">Kerning array</param>
	/// <returns>Width</returns>
	////////////////////////////////////////////////////////////////////
	public Double TextKerningWidth
			(
			Double			FontSize,		// in points
			KerningAdjust[]	KerningArray
			)
		{
		// text is null or empty
		if(KerningArray == null || KerningArray.Length == 0) return(0);

		// total width
		Double Width = 0;

		// draw text
		Int32 LastStr = KerningArray.Length - 1;
		for(Int32 Index = 0; Index < LastStr; Index++)
			{
			KerningAdjust KA = KerningArray[Index];
			Width += TextWidth(FontSize, KA.Text) + KA.Adjust * FontSize / (1000.0 * ScaleFactor);
			}

		// last string
		Width += TextWidth(FontSize, KerningArray[LastStr].Text);
		return(Width);
		}

	////////////////////////////////////////////////////////////////////
	// Write object to PDF file
	////////////////////////////////////////////////////////////////////

	internal override void WriteObjectToPdfFile()
		{
		// pdf font name
		StringBuilder PdfFontName = new StringBuilder("/");

		// for embedded font add 6 alpha characters prefix
		if(EmbeddedFont)
			{
			PdfFontName.Append("PFWAAA+");
			Int32 Ptr1 = 6;
			for(Int32 Ptr2 = ResourceCode.Length - 1; Ptr2 >= 0 && Char.IsDigit(ResourceCode[Ptr2]); Ptr2--)
				{
				PdfFontName[Ptr1--] =  (Char) ((Int32) ResourceCode[Ptr2] + ('A' - '0'));
				}
			}

		// PDF readers are not happy with space in font name
		PdfFontName.Append(FontFamily.Name.Replace(" ", "#20"));

		// font name
		if((DesignFont.Style & FontStyle.Bold) != 0)
			{
			if((DesignFont.Style & FontStyle.Italic) != 0)
				PdfFontName.Append(",BoldItalic");
			else
				PdfFontName.Append(",Bold");
			}
		else if((DesignFont.Style & FontStyle.Italic) != 0)
			{
			PdfFontName.Append(",Italic");
			}

		// we have one byte characters 
		if(FontResCodeUsed) CharCodeToPdfFile(PdfFontName.ToString());

		// we have two bytes characters 
		if(FontResGlyphUsed) GlyphIndexToPdfFile(PdfFontName.ToString());

		// dispose resources
		Dispose();
		return;
		}

	////////////////////////////////////////////////////////////////////
	// Write character code oject to PDF file
	////////////////////////////////////////////////////////////////////

	internal void CharCodeToPdfFile
			(
			String	PdfFontName
			)
		{
		// look for first and last character
		Int32 FirstChar;
		Int32 LastChar;
		for(FirstChar = 0; FirstChar < 256 && (CharInfoArray[0][FirstChar] == null || !CharInfoArray[0][FirstChar].ActiveChar); FirstChar++);
		if(FirstChar == 256) return;
		for(LastChar = 255; CharInfoArray[0][LastChar] == null || !CharInfoArray[0][LastChar].ActiveChar; LastChar--);

		// add items to dictionary
		Dictionary.Add("/Subtype", "/TrueType");
		Dictionary.Add("/BaseFont", PdfFontName);

		// add first and last characters
		Dictionary.AddInteger("/FirstChar", FirstChar);
		Dictionary.AddInteger("/LastChar", LastChar);

		// create font descriptor
		Dictionary.AddIndirectReference("/FontDescriptor", CharCodeFontDescriptor(PdfFontName, FirstChar, LastChar));

		// create width object array
		Dictionary.AddIndirectReference("/Widths", CharCodeFontWidthArray(FirstChar, LastChar));

		// set encoding
		Dictionary.Add("/Encoding", "/WinAnsiEncoding");

		// call base write PdfObject to file method
		base.WriteObjectToPdfFile();

		// exit
		return;
		}

	////////////////////////////////////////////////////////////////////
	// Character code font descriptor
	////////////////////////////////////////////////////////////////////

	private PdfObject CharCodeFontDescriptor
			(
			String	PdfFontName,
			Int32	FirstChar,
			Int32	LastChar
			)
		{
		// create font descriptor
		PdfObject FontDescriptor = FontDescriptorCommon(PdfFontName);

		// build bounding box and calculate maximum width
		Int32 Left = Int32.MaxValue;
		Int32 Bottom = Int32.MaxValue;
		Int32 Right = Int32.MinValue;
		Int32 Top = Int32.MinValue;
		Int32 MaxWidth = Int32.MinValue;
		for(Int32 Index = FirstChar; Index <= LastChar; Index++)
			{
			// shortcut
			CharInfo CharInfo = CharInfoArray[0][Index];

			// not used
			if(CharInfo == null || !CharInfo.ActiveChar) continue;

			// bounding box
			if(CharInfo.DesignBBoxLeft < Left) Left = CharInfo.DesignBBoxLeft;
			if(CharInfo.DesignBBoxBottom < Bottom) Bottom = CharInfo.DesignBBoxBottom;
			if(CharInfo.DesignBBoxRight > Right) Right = CharInfo.DesignBBoxRight;
			if(CharInfo.DesignBBoxTop > Top) Top = CharInfo.DesignBBoxTop;

			// max width
			if(CharInfo.DesignWidth > MaxWidth) MaxWidth = CharInfo.DesignWidth;
			}

		// add to font descriptor array
		FontDescriptor.Dictionary.AddReal("/MaxWidth", FontDesignToPdfUnits(MaxWidth));
		FontDescriptor.Dictionary.AddFormat("/FontBBox", "[{0} {1} {2} {3}]",
			FontDesignToPdfUnits(Left), FontDesignToPdfUnits(Bottom), FontDesignToPdfUnits(Right), FontDesignToPdfUnits(Top));

		// create font file
		if(EmbeddedFont)
			{
			// create font file stream
			PdfFontFile EmbeddedFontObj = new PdfFontFile(this, FirstChar, LastChar);

			// add link to font object
			FontDescriptor.Dictionary.AddIndirectReference("/FontFile2", EmbeddedFontObj);
			}

		// output font descriptor
		FontDescriptor.WriteObjectToPdfFile();

		// return with reference to font descriptor
		return(FontDescriptor);
		}

	////////////////////////////////////////////////////////////////////
	// Character code font descriptor
	////////////////////////////////////////////////////////////////////

	private PdfObject FontDescriptorCommon
			(
			String	PdfFontName
			)
		{
		// create font descriptor
		PdfObject FontDescriptor = new PdfObject(Document, ObjectType.Dictionary, "/FontDescriptor");

		// font descriptor dictionary
		FontDescriptor.Dictionary.Add("/FontName", PdfFontName);	// must be the same as BaseFont above
		FontDescriptor.Dictionary.AddInteger("/Flags", (Int32) FontFlags);
		FontDescriptor.Dictionary.AddReal("/ItalicAngle", (Double) DesignItalicAngle / 10.0);
		FontDescriptor.Dictionary.AddInteger("/FontWeight", DesignFontWeight);
		FontDescriptor.Dictionary.AddReal("/Leading", FontDesignToPdfUnits(PdfLeading));
		FontDescriptor.Dictionary.AddReal("/Ascent", FontDesignToPdfUnits(PdfAscent));
		FontDescriptor.Dictionary.AddReal("/Descent", FontDesignToPdfUnits(-PdfDescent));

		// alphabetic (non symbolic) fonts
		if((FontFlags & PdfFontFlags.Symbolic) == 0)
			{
			// character info for small x
			CharInfo CharInfo = FontApi.GetGlyphMetricsApiByCode('x');
			FontDescriptor.Dictionary.AddReal("/XHeight", FontDesignToPdfUnits(CharInfo.DesignBBoxTop));
			FontDescriptor.Dictionary.AddReal("/AvgWidth", FontDesignToPdfUnits(CharInfo.DesignWidth));

			// character info for capital M
			CharInfo = FontApi.GetGlyphMetricsApiByCode('M');
			FontDescriptor.Dictionary.AddReal("/CapHeight", FontDesignToPdfUnits(CharInfo.DesignBBoxTop));
			FontDescriptor.Dictionary.AddReal("/StemV", StemV());
			}

		// return with reference to font descriptor
		return(FontDescriptor);
		}

	////////////////////////////////////////////////////////////////////
	// Character code font width array
	////////////////////////////////////////////////////////////////////

	internal PdfObject CharCodeFontWidthArray
			(
			Int32	FirstChar,
			Int32	LastChar
			)
		{
		// create width object array
		PdfObject FontWidthArray = new PdfObject(Document, ObjectType.Other);

		FontWidthArray.ObjectValueList.Add((Byte) '[');

		Int32 EolLength = 100;
		for(Int32 Index = FirstChar; Index <= LastChar; Index++)
			{
			// shortcut
			CharInfo CharInfo = CharInfoArray[0][Index];

			// add new line after a 100 character block
			if(FontWidthArray.ObjectValueList.Count > EolLength)
				{
				FontWidthArray.ObjectValueList.Add((Byte) '\n');
				EolLength = FontWidthArray.ObjectValueList.Count + 100;
				}

			// not used
			if(CharInfo == null || !CharInfo.ActiveChar)
				{
				FontWidthArray.ObjectValueAppend("0 ");
				}
			// used
			else
				{
				// add width to width array
				FontWidthArray.ObjectValueFormat("{0} ", (Single) FontDesignToPdfUnits(CharInfo.DesignWidth));
				}
			}

		// terminate width array
		FontWidthArray.ObjectValueList[FontWidthArray.ObjectValueList.Count - 1] = (Byte) ']';

		// output object to pdf file
		FontWidthArray.WriteObjectToPdfFile();

		// return reference to font width
		return(FontWidthArray);
		}

	////////////////////////////////////////////////////////////////////
	// Write glyph index font oject to PDF file
	////////////////////////////////////////////////////////////////////

	internal void GlyphIndexToPdfFile
			(
			String	PdfFontName
			)
		{
		// add items to dictionary
		GlyphIndexFont.Dictionary.Add("/Subtype", "/Type0");
		GlyphIndexFont.Dictionary.Add("/BaseFont", PdfFontName);
		GlyphIndexFont.Dictionary.Add("/Encoding", "/Identity-H");

		// create to unicode
		GlyphIndexFont.Dictionary.AddIndirectReference("/ToUnicode", GlyphIndexToUnicode());

		// create descended fonts object
		PdfObject DescendedFonts = new PdfObject(Document, ObjectType.Dictionary, "/Font");
		GlyphIndexFont.Dictionary.AddFormat("/DescendantFonts", "[{0} 0 R]", DescendedFonts.ObjectNumber);

		// add items to dictionary
		DescendedFonts.Dictionary.Add("/Subtype", "/CIDFontType2");
		DescendedFonts.Dictionary.Add("/BaseFont", PdfFontName);

		// add CIDSystem info
		PdfDictionary CIDSystemInfo = new PdfDictionary(DescendedFonts);
		DescendedFonts.Dictionary.AddDictionary("/CIDSystemInfo", CIDSystemInfo);
		CIDSystemInfo.AddPdfString("/Ordering", "Identity");
		CIDSystemInfo.AddPdfString("/Registry", "Adobe");
		CIDSystemInfo.AddInteger("/Supplement", 0);

		// create font descriptor
		DescendedFonts.Dictionary.AddIndirectReference("/FontDescriptor", GlyphIndexFontDescriptor(PdfFontName));

		// create character width array
		DescendedFonts.Dictionary.AddIndirectReference("/W", GlyphIndexWidthArray());

		// send glyph index font to output file
		GlyphIndexFont.WriteObjectToPdfFile();

		// exit
		return;
		}

	////////////////////////////////////////////////////////////////////
	// Glyph index font descriptor
	////////////////////////////////////////////////////////////////////

	private PdfObject GlyphIndexFontDescriptor
			(
			String	PdfFontName
			)
		{
		// create font descriptor
		PdfObject FontDescriptor = FontDescriptorCommon(PdfFontName);

		// build bounding box and calculate maximum width
		Boolean Undef = UndefinedCharInfo.ActiveChar;
		Int32 Left = Undef ? UndefinedCharInfo.DesignBBoxLeft : Int32.MaxValue;
		Int32 Bottom = Undef ? UndefinedCharInfo.DesignBBoxBottom : Int32.MaxValue;
		Int32 Right = Undef ? UndefinedCharInfo.DesignBBoxRight : Int32.MinValue;
		Int32 Top = Undef ? UndefinedCharInfo.DesignBBoxTop : Int32.MinValue;
		Int32 MaxWidth = Undef ? UndefinedCharInfo.DesignWidth : Int32.MinValue;

		// look for all used characters
		for(Int32 Row = 1; Row < 256; Row++)
			{
			CharInfo[] OneRow = CharInfoArray[Row];
			if(OneRow == null) continue;
			for(Int32 Col = 0; Col < 256; Col++)
				{
				CharInfo CharInfo = OneRow[Col];
				if(CharInfo == null || !CharInfo.ActiveChar) continue;

				// bounding box
				if(CharInfo.DesignBBoxLeft < Left) Left = CharInfo.DesignBBoxLeft;
				if(CharInfo.DesignBBoxBottom < Bottom) Bottom = CharInfo.DesignBBoxBottom;
				if(CharInfo.DesignBBoxRight > Right) Right = CharInfo.DesignBBoxRight;
				if(CharInfo.DesignBBoxTop > Top) Top = CharInfo.DesignBBoxTop;

				// max width
				if(CharInfo.DesignWidth > MaxWidth) MaxWidth = CharInfo.DesignWidth;
				}
			}

		// add to font descriptor array
		FontDescriptor.Dictionary.AddReal("/MaxWidth", FontDesignToPdfUnits(MaxWidth));
		FontDescriptor.Dictionary.AddFormat("/FontBBox", "[{0} {1} {2} {3}]",
			FontDesignToPdfUnits(Left), FontDesignToPdfUnits(Bottom), FontDesignToPdfUnits(Right), FontDesignToPdfUnits(Top));

		// create font file
		if(EmbeddedFont)
			{
			// create font file stream
			PdfFontFile EmbeddedFontObj = new PdfFontFile(this, 0, 0);

			// add link to font object
			FontDescriptor.Dictionary.AddIndirectReference("/FontFile2", EmbeddedFontObj);
			}

		// send font descriptor to output file
		FontDescriptor.WriteObjectToPdfFile();

		// return reference to font descriptor
		return(FontDescriptor);
		}

	////////////////////////////////////////////////////////////////////
	// Glyph index to Unicode stream
	////////////////////////////////////////////////////////////////////

	private PdfObject GlyphIndexToUnicode()
		{
		String Header = "/CIDInit /ProcSet findresource begin\n" +
						"14 dict begin\n" +
						"begincmap\n" +
						"/CIDSystemInfo<</Registry(Adobe)/Ordering (UCS)/Supplement 0>>def\n" +
						"/CMapName/Adobe-Identity-UCS def\n" +
						"/CMapType 2 def\n" +
						"1 begincodespacerange\n" +
						"<0000><FFFF>\n" +
						"endcodespacerange\n";

		String Trailer = "endcmap\n" +
						"CMapName currentdict /CMap defineresource pop\n" +
						"end\n" +
						"end\n";

		// create array of glyph index to character code
		List<UnicodeRange> RangeArray = new List<UnicodeRange>();

		// add one entry for undefined character
		if(UndefinedCharInfo.ActiveChar) RangeArray.Add(new UnicodeRange(0, 0));

		// look for all used characters
		for(Int32 Row = 1; Row < 256; Row++)
			{
			CharInfo[] OneRow = CharInfoArray[Row];
			if(OneRow == null) continue;
			for(Int32 Col = 0; Col < 256; Col++)
				{
				CharInfo CharInfo = OneRow[Col];
				if(CharInfo == null || !CharInfo.ActiveChar) continue;
				RangeArray.Add(new UnicodeRange(CharInfo.NewGlyphIndex, CharInfo.CharCode));
				}
			}

		// sort by glyph index
		RangeArray.Sort();

		// look for ranges
		UnicodeRange Last = RangeArray[0];
		Int32 Run = 1;
		for(Int32 Index = 1; Index < RangeArray.Count;)
			{
			UnicodeRange Next = RangeArray[Index];

			// we have duplicate glyph index (i.e. space and non-breaking space)
			// remove the higher char code
			if(Next.GlyphStart == Last.GlyphStart)
				{
				if(Next.CharCode < Last.CharCode) Last.CharCode = Next.CharCode;
				RangeArray.RemoveAt(Index);
				continue;
				}

			// range is found
			if(Next.GlyphStart == Last.GlyphEnd + 1 && Next.CharCode == Last.CharCode + Run)
				{
				Last.GlyphEnd++;
				Run++;
				RangeArray.RemoveAt(Index);
				continue;
				}

			// start new range
			Last = Next;
			Run = 1;
			Index++;
			}

		// create ToUnicode stream object
		PdfObject ToUnicode = new PdfObject(Document, ObjectType.Stream);

		// ouput header
		ToUnicode.ObjectValueAppend(Header);

		// output ranges
		Run = 0;
		for(Int32 Index = 0; Index < RangeArray.Count; Index++)
			{
			if(Run == 0)
				{
				if(Index != 0) ToUnicode.ObjectValueAppend("endbfrange\n");
				Run = Math.Min(100, RangeArray.Count - Index);
				ToUnicode.ObjectValueFormat("{0} beginbfrange\n", Run);
				}
			Run--;
			UnicodeRange Range = RangeArray[Index];
			String RangeStr = String.Format("<{0:x4}><{1:x4}><{2:x4}>\n", Range.GlyphStart, Range.GlyphEnd, Range.CharCode);
			foreach(Char Chr in RangeStr) ToUnicode.ObjectValueList.Add((Byte) Chr);
			}
		if(RangeArray.Count > 0) ToUnicode.ObjectValueAppend("endbfrange\n");

		// output trailer
		ToUnicode.ObjectValueAppend(Trailer);

		// send to output file
		ToUnicode.WriteObjectToPdfFile();

		// return reference to glyph index to unicode translation
		return(ToUnicode);
		}

	////////////////////////////////////////////////////////////////////
	// Glyph index to width array
	////////////////////////////////////////////////////////////////////

	private PdfObject GlyphIndexWidthArray()
		{
		// create array of glyph index to character code
		List<GlyphWidth> WidthArray = new List<GlyphWidth>();

		// add undefined glyph
		if(UndefinedCharInfo.ActiveChar) WidthArray.Add(new GlyphWidth(0, UndefinedCharInfo.DesignWidth));

		// look for all used characters
		for(Int32 Row = 1; Row < 256; Row++)
			{
			CharInfo[] OneRow = CharInfoArray[Row];
			if(OneRow == null) continue;
			for(Int32 Col = 0; Col < 256; Col++)
				{
				CharInfo CharInfo = OneRow[Col];
				if(CharInfo == null || !CharInfo.ActiveChar) continue;
				WidthArray.Add(new GlyphWidth(CharInfo.NewGlyphIndex, CharInfo.DesignWidth));
				}
			}

		// sort by glyph index
		WidthArray.Sort();

		// create ToUnicode stream object
		PdfObject GlyphWidthArray = new PdfObject(Document, ObjectType.Other);

		// ouput header
		GlyphWidthArray.ObjectValueList.Add((Byte) '[');

		// output ranges
		Int32 LastIndex = WidthArray[0].GlyphIndex;
		Double LastWidth = WidthArray[0].Width;;
		Int32 StartIndex = 0;
		Int32 StartWidth = 0;
		GlyphWidth Item = null;
		for(Int32 Index = 1; Index <= WidthArray.Count; Index++)
			{
			if(Index < WidthArray.Count)
				{
				// shortcut
				Item = WidthArray[Index];

				// it is possible to have two entries with the save glyph index
				if(Item.GlyphIndex == LastIndex)
					{
					WidthArray.RemoveAt(Index);
					Index--;
					continue;
					}

				// two consecutive glyphs 
				if(Item.GlyphIndex == LastIndex + 1)
					{
					// two consecutive glyphs have the same width
					if(Item.Width == LastWidth)
						{
						LastIndex++;
						continue;
						}
					// width is not the same and the last group is too small
					if(Index - StartWidth < 3)
						{
						StartWidth = Index;
						LastIndex++;
						continue;
						}
					}
				}

			// either glyphs are not consecutives
			// or 3 or more glyphs have the same width
			// for first case if there are less than 3 equal width eliminate equal block
			if(Index - StartWidth < 3) StartWidth = Index;

			// output GlyphIndex [W W W] between StartIndex and StartWidth
			if(StartWidth > StartIndex)
				{
				if(StartIndex != 0) GlyphWidthArray.ObjectValueList.Add((Byte) '\n');
				GlyphWidthArray.ObjectValueFormat("{0}[{1}", WidthArray[StartIndex].GlyphIndex, (Single) FontDesignToPdfUnits(WidthArray[StartIndex].Width));
				for(Int32 Ptr = StartIndex + 1; Ptr < StartWidth; Ptr++)
					{
					GlyphWidthArray.ObjectValueList.Add(((Ptr - StartIndex) % 12) == 11 ? (Byte) '\n' : (Byte) ' ');
					GlyphWidthArray.ObjectValueFormat("{0}", (Single) FontDesignToPdfUnits(WidthArray[Ptr].Width));
					}
				GlyphWidthArray.ObjectValueList.Add((Byte) ']');
				}

			if(Index > StartWidth)
				{ 
				if(StartWidth != 0) GlyphWidthArray.ObjectValueList.Add((Byte) '\n');

				// output C(StartWidth) C(Index - 1) W
				GlyphWidthArray.ObjectValueFormat("{0} {1} {2}",
					WidthArray[StartWidth].GlyphIndex, WidthArray[Index - 1].GlyphIndex, (Single) FontDesignToPdfUnits(WidthArray[StartWidth].Width));
				}

			// exit the loop
			if(Index == WidthArray.Count) break;

			// reset block
			LastIndex = Item.GlyphIndex;
			LastWidth = Item.Width;
			StartIndex = Index;
			StartWidth = Index;
			}

		// terminate width array
		GlyphWidthArray.ObjectValueList.Add((Byte) ']');

		// send to output file
		GlyphWidthArray.WriteObjectToPdfFile();

		// return reference to glyph width array
		return(GlyphWidthArray);
		}

	////////////////////////////////////////////////////////////////////
	// Calculate StemV from capital I
	////////////////////////////////////////////////////////////////////

	private Double StemV()
		{
		// convert I to graphics path
		GraphicsPath GP = new GraphicsPath();
		GP.AddString("I", FontFamily, (Int32) DesignFont.Style, 1000, Point.Empty, StringFormat.GenericDefault);

		// center point of I
		RectangleF Rect = GP.GetBounds();
		Int32 X = (Int32) ((Rect.Left + Rect.Right) / 2);
		Int32 Y = (Int32) ((Rect.Bottom + Rect.Top) / 2);

		// bounding box converted to integer
		Int32 LeftLimit = (Int32) Rect.Left;
		Int32 RightLimit = (Int32) Rect.Right;

		// make sure we are within the I
		if(!GP.IsVisible(X, Y)) return((Double) (RightLimit - LeftLimit));

		// look for left edge
		Int32 Left;
		for(Left = X - 1; Left >= LeftLimit && GP.IsVisible(Left, Y); Left--);

		// look for right edge
		Int32 Right;
		for(Right = X + 1; Right < RightLimit && GP.IsVisible(Right, Y); Right++);

		// exit
		return((Double) (Right - Left - 1));
		}

	/// <summary>
	/// Compage PDF font objects
	/// </summary>
	/// <param name="Other">Other PDFFont</param>
	/// <returns>Compare result</returns>
	public int CompareTo
			(
			PdfFont Other
			)
		{
		int Cmp = string.Compare(this.FontFamilyName, Other.FontFamilyName, true);
		if(Cmp != 0) return(Cmp);
		Cmp = this.FontStyle - Other.FontStyle;
		if(Cmp != 0) return Cmp;
		return (this.EmbeddedFont ? 1 : 0) - (Other.EmbeddedFont ? 1 : 0);
		}
	/// <summary>
	/// Dispose FontApi
	/// </summary>
	public void Dispose()
		{
		if(FontApi != null)
			{
			FontApi.Dispose();
			FontApi = null;
			}
		return;
		}
	}

////////////////////////////////////////////////////////////////////
// Support class for glyph index to unicode translation
////////////////////////////////////////////////////////////////////

internal class UnicodeRange : IComparable<UnicodeRange>
	{
	internal Int32	GlyphStart;
	internal Int32	GlyphEnd;
	internal Int32	CharCode;

	internal UnicodeRange
			(
			Int32	GlyphIndex,
			Int32	CharCode
			)
		{
		GlyphStart = GlyphIndex;
		GlyphEnd = GlyphIndex;
		this.CharCode = CharCode;
		return;
		}

	public Int32 CompareTo
			(
			UnicodeRange Other
			)
		{
		return(GlyphStart - Other.GlyphStart);
		}
	}

////////////////////////////////////////////////////////////////////
// Support class for glyph index to unicode translation
////////////////////////////////////////////////////////////////////

internal class GlyphWidth : IComparable<GlyphWidth>
	{
	internal Int32	GlyphIndex;
	internal Int32	Width;

	internal GlyphWidth
			(
			Int32	GlyphIndex,
			Int32	Width
			)
		{
		this.GlyphIndex = GlyphIndex;
		this.Width = Width;
		return;
		}

	public Int32 CompareTo
			(
			GlyphWidth Other
			)
		{
		return(GlyphIndex - Other.GlyphIndex);
		}
	}
}
